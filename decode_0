#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl

mpl.rc('font', size=15)
mpl.rc('figure', figsize=(8, 5))

from keras.models import load_model

def decode_image(encoded, decoder, logo, weight):
    """ Take in 4 images of digits, encode and embed the UR logo

    Arguments:
    ----------
    encoded: array of shape (16, 16, 3)
    decoder: convolutional decoder
    logo: UR logo image. array of shape (16, 16, 3)

    Returns:
    --------
    digits: array of shape (4, 28, 28, 1)

    """
    encoded = encoded*(weight+1) - weight*logo
    digit_1 = encoded[:8, :8, :]
    digit_2 = encoded[:8, 8:16, :]
    digit_3 = encoded[8:16, :8, :]
    digit_4 = encoded[8:16, 8:16, :]

    encoded = np.stack([digit_1, digit_2, digit_3, digit_4], axis=0)
    digits = decoder.predict(encoded)

    return digits


if __name__ == '__main__':

    def parse_command_line():
        parser = argparse.ArgumentParser(description='integration')
        parser.add_argument('image',
                            help    = '4-digit input',
                            type    = str)
        params = parser.parse_args()
        return params

    params = parse_command_line()

    # parameters
    weight = 5
    logo = plt.imread('logo.png')

    # import encoder and decoder
    decoder = load_model('models/decoder.h5')

    # create password image and decode
    digits_encoded = plt.imread(params.image)
    digits_decoded = decode_image(digits_encoded, decoder, logo, weight=weight)

    # show and save decoded image vs original
    fig, axes = plt.subplots(1, 4, figsize=(20, 5))
    for i in range(4):
        ax = axes.flatten()[i]
        ax.imshow(digits_decoded[i].reshape(28, 28))
        ax.axis('off')
    plt.savefig('digits_decoded.png', dpi=100, bbox_inches='tight')

    # classify
    classifier = load_model('models/classifier.h5')
    print('')
    print('Your pin number is ')
    print(np.argmax(classifier.predict(digits_decoded), axis=1))

