#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
from scipy.misc import imsave

mpl.rc('font', size=15)
mpl.rc('figure', figsize=(8, 5))

from keras.datasets import mnist
from keras.models import load_model

def randomizer(digits_str, x, y):

    digits = [int(r) for r in digits_str]

    image_list = []
    for digit in digits:
        mask = (y == digit)
        image_list.append(x[mask][np.random.randint(np.sum(mask), size=1)])

    image_list = np.array(image_list)
    image_list = image_list.reshape(len(digits_str), 28, 28, 1)
    return image_list

def encode_image(digits, encoder, logo, weight=100):
    """ Take in 4 images of digits, encode and embed the UR logo

    Arguments:
    ----------
    digits: array of shape (4, 28, 28, 1)
    encoder: convolutional encoder
    logo: UR logo image. array of shape (16, 16, 3)
    weight: weight of logo image

    Returns:
    --------
    encoded: array of shape (16, 16, 3)

    """

    digits = digits.reshape(4, 28, 28, 1)
    encoded_0 = encoder.predict(digits)
    encoded_1 = np.concatenate([encoded_0[0], encoded_0[1]], axis=1)
    encoded_2 = np.concatenate([encoded_0[2], encoded_0[3]], axis=1)
    encoded = np.concatenate([encoded_1, encoded_2], axis=0)
    encoded = (weight*logo + encoded)/(weight+1)

    return encoded

if __name__ == '__main__':

    def parse_command_line():
        parser = argparse.ArgumentParser(description='integration')
        parser.add_argument('digits_str',
                            help    = '4-digit input',
                            type    = str)
        params = parser.parse_args()
        return params

    params = parse_command_line()

    # import MNIST data
    (x_train, y_train), (x_test, y_test) = mnist.load_data()

    x_train = x_train.astype(float) / 255.
    x_test = x_test.astype(float) / 255.
    x_train = x_train.reshape(*x_train.shape, 1)
    x_test = x_test.reshape(*x_test.shape, 1)

    # parameters
    weight = 5
    logo = plt.imread('logo.png')
    digits = randomizer(params.digits_str, x=x_test, y=y_test)

    # import encoder and decoder
    encoder = load_model('models/encoder.h5')

    # create password image and decode
    digits_encoded = encode_image(digits, encoder, logo, weight=weight)

    # save password image
    imsave('digits_encoded.png', digits_encoded)